name: Setup Environment
description: >-
  This is a composite action that is used to set up the runner for running
  Rancher Desktop.
inputs:
  user:
    default: ''
    description: >-
      (Linux only) The user to use to set up `pass`

runs:
  using: composite
  steps:
  - name: "Windows: Stop unwanted services"
    if: runner.os == 'Windows'
    shell: pwsh
    run: >-
      Get-Service -ErrorAction Continue -Name
      @('W3SVC', 'docker')
      | Stop-Service

  - name: "Windows: Update any pre-installed WSL"
    if: runner.os == 'Windows'
    shell: pwsh
    run: |
      # Sometimes this results in a HTTP 403 for some reason; in that case, we
      # need to retry.
      do {
        wsl --update
      } while ( -not $? )
      # Setting the default version also lets WSL finish updating.
      wsl --set-default-version 2

  - name: "Windows: Install yq"
    if: runner.os == 'Windows'
    shell: bash
    run: |
      set -o xtrace
      bindir="$HOME/bin"
      if [[ ! "$PATH" =~ "$bindir" ]]; then
        bindir=/usr/bin
      fi
      if ! command -v yq; then
        mkdir -p "$bindir"
        curl --location --output "$bindir/yq.exe" \
          https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_windows_amd64.exe
        chmod a+x "$bindir/yq.exe"
      fi

  - name: "Linux: Determine whether sudo is required"
    if: runner.os == 'Linux'
    shell: bash
    id: sudo
    run: |
      if [[ $(id --user) -eq 0 ]]; then
        echo "sudo=command" >> "$GITHUB_OUTPUT"
        # Fix for https://github.com/rocky-linux/sig-cloud-instance-images/issues/56
        chmod u+r /etc/shadow
      else
        echo "sudo=sudo" >> "$GITHUB_OUTPUT"
      fi

  - name: "Linux: Enable KVM access"
    if: runner.os == 'Linux'
    shell: bash
    run: ${{ steps.sudo.outputs.sudo }} chmod a+rwx /dev/kvm

  - name: "Linux: Set unprivileged port start to 80"
    if: runner.os == 'Linux'
    shell: bash
    run: >-
      ${{ steps.sudo.outputs.sudo }}
      sh -c
      'echo 80 > /proc/sys/net/ipv4/ip_unprivileged_port_start'

  - name: "Linux: Install required packages"
    if: runner.os == 'Linux'
    shell: bash
    run: |
      source /etc/os-release
      for id in $ID $ID_LIKE; do
        case $id in
          suse|opensuse)
            ${{ steps.sudo.outputs.sudo }} zypper --non-interactive install \
              fuse gawk git GraphicsMagick gtk3-tools jq mozilla-nss \
              noto-sans-fonts password-store sudo xvfb-run xauth which
            if [[ ${GITHUB_JOB:-unknown} =~ appimage ]]; then
              ${{ steps.sudo.outputs.sudo }} zypper --non-interactive install \
                libasound2 openssh-clients
            fi
            exit 0;;
          rocky|rhel|centos|fedora)
            if [[ "$id" != "fedora" ]]; then
              ${{ steps.sudo.outputs.sudo }} dnf install --assumeyes \
                "https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION_ID%%.*}.noarch.rpm"
              ${{ steps.sudo.outputs.sudo }} /usr/bin/crb enable # spellcheck-ignore-line
            fi
            ${{ steps.sudo.outputs.sudo }} dnf install --assumeyes \
              at-spi2-atk cups-libs git GraphicsMagick gtk3 jq \
              libva nss pass procps-ng sudo xorg-x11-server-Xvfb \
              /usr/bin/script \
              --setopt=excludepkgs=systemd-standalone-tmpfiles
            exit 0;;
          debian|ubuntu)
            ${{ steps.sudo.outputs.sudo }} apt-get update
            ${{ steps.sudo.outputs.sudo }} apt-get install --verbose-versions --yes \
              curl jq pass sudo xvfb
            exit 0;;
        esac
      done
      printf "Could not find known distribution in [%s %s]\n" "$ID" "$ID_LIKE" >&2
      exit 1

  - name: "Linux: Set up passwordless sudo"
    if: runner.os == 'Linux'
    shell: bash
    run: |
      case "$TARGET_USER" in
        ""|root)
          exit 0;;
      esac
      echo "$TARGET_USER ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/$TARGET_USER
    env:
      TARGET_USER: ${{ inputs.user || 'root' }}

  - name: "Linux: Initialize pass"
    if: runner.os == 'Linux'
    shell: >-
      /usr/bin/sudo --user=${{ inputs.user || 'root' }}
      --login --set-home --non-interactive bash {0}
    run: |
      # Configure the agent to allow default passwords
      HOMEDIR="$(gpgconf --list-dirs homedir)" # spellcheck-ignore-line
      mkdir -p "${HOMEDIR}"
      chmod 0700 "${HOMEDIR}"
      echo "allow-preset-passphrase" >> "${HOMEDIR}/gpg-agent.conf"

      # Create a GPG key
      gpg --quick-generate-key --yes --batch --passphrase '' \
        user@rancher-desktop.test default \
        default never

      # Get info about the newly created key
      DATA="$(gpg --batch --with-colons --with-keygrip --list-secret-keys)"
      FINGERPRINT="$(awk -F: '/^fpr:/ { print $10 ; exit }' <<< "${DATA}")" # spellcheck-ignore-line
      GRIP="$(awk -F: '/^grp:/ { print $10 ; exit }' <<< "${DATA}")"

      # Save the password
      gpg-connect-agent --verbose "PRESET_PASSPHRASE ${GRIP} -1 00" /bye

      # Initialize pass
      pass init "${FINGERPRINT}"
