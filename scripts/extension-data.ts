/**
 * This file generates pkg/rancher-desktop/assets/extension-data.yaml
 *
 * Usage: `yarn generate:extension-data`
 */

import childProcess from 'child_process';
import fs from 'fs';
import util from 'util';

import yaml from 'yaml';

interface extensionInfo {
  /** Whether this extension is compatible with containerd; defaults to true. */
  containerd_compatible?: boolean;
  /** Override for the logo. */
  logo?: string;
}
const EXTENSION_PATH = './scripts/assets/extension-data.yaml';
const EXTENSION_INFO: extensionInfo[] = yaml.parse(fs.readFileSync(EXTENSION_PATH, 'utf-8'));

const warningString =
  '# Data generated by running `yarn generate:extension-data`. DO NOT EDIT.';

async function processExtension(imageName: string, info: extensionInfo) {
  const [slug, version] = imageName.split(':', 2);
  const execFile = util.promisify(childProcess.execFile);
  const { stdout:out } = await execFile('docker', ['image', 'list', '--format=json', imageName]);

  if (!out.trim()) {
    // Image not found
    console.log(`Pulling image ${ imageName }`);
    await execFile('docker', ['pull', imageName]);
  }
  const { stdout } = await execFile('docker', ['inspect', imageName]);
  const data = JSON.parse(stdout)[0];
  const labels = data.Config.Labels;

  return {
    slug,
    version,
    containerd_compatible: info.containerd_compatible ?? true,
    labels,
    title:                 labels['org.opencontainers.image.title'],
    logo:                  info.logo ?? labels['com.docker.desktop.extension.icon'],
    publisher:             labels['org.opencontainers.image.vendor'],
    short_description:     labels['org.opencontainers.image.description'],
  };
}

async function run() {
  const fileName = 'pkg/rancher-desktop/assets/extension-data.yaml';
  const promises = Object.entries(EXTENSION_INFO).map(info => processExtension(...info));
  const data = await Promise.all(promises);
  const result = `${ warningString }\n${ yaml.stringify(data) }`;

  await fs.promises.writeFile(fileName, result, 'utf-8');
}

run().catch((ex) => {
  console.error(ex);
  process.exit(1);
});
