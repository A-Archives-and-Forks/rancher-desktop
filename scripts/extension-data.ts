/**
 * This file generates pkg/rancher-desktop/assets/extension-data.yaml
 *
 * Usage: `yarn generate:extension-data`
 */

import childProcess from 'child_process';
import fs from 'fs';
import util from 'util';

import yaml from 'yaml';

/**
 * This is a fixed list of extension image names, mapping to whether this
 * extension is compatible with containerd.  Only these extensions will be
 * scanned.
 */
const extensionInfo = {
  'ghcr.io/rancher-sandbox/rancher-desktop-rdx-open-webui:v0.0.4': true,
  'ghcr.io/rancher-sandbox/epinio-desktop-extension:0.0.23.5':     true,
  'julianb90/tachometer:0.0.3':                                    true,
  'docker/logs-explorer-extension:0.2.2':                          true,
  'prakhar1989/dive-in:0.0.8':                                     false,
  'joycelin79/newman-extension:0.0.7':                             true,
  'docker/resource-usage-extension:1.0.3':                         true,
  'anchore/docker-desktop-extension:0.5.1':                        false,
  'ignatandrei/blockly-automation:0.0.7':                          true,
  'docker/disk-usage-extension:0.2.7':                             false,
  'harpooncorp/harpoon-ext:0.0.4':                                 true,
  'vklokun/docker-desktop-extension:0.1.0':                        true,
  'caretdev/intersystems-extension:0.1.7':                         true,
};

const warningString =
  '# Data generated by running `yarn generate:extension-data`. DO NOT EDIT.';

async function processExtension(imageName: string, containerd: boolean) {
  const [slug, version] = imageName.split(':', 2);
  const execFile = util.promisify(childProcess.execFile);
  const { stdout:out } = await execFile('docker', ['image', 'list', '--format=json', imageName]);

  if (!out.trim()) {
    // Image not found
    console.log(`Pulling image ${ imageName }`);
    await execFile('docker', ['pull', imageName]);
  }
  const { stdout } = await execFile('docker', ['inspect', imageName]);
  const data = JSON.parse(stdout)[0];
  const labels = data.Config.Labels;

  return {
    slug,
    version,
    containerd_compatible: containerd,
    labels,
    title:                 labels['org.opencontainers.image.title'],
    logo:                  labels['com.docker.desktop.extension.icon'],
    publisher:             labels['org.opencontainers.image.vendor'],
    short_description:     labels['org.opencontainers.image.description'],
  };
}

async function run() {
  const fileName = 'pkg/rancher-desktop/assets/extension-data.yaml';
  const promises = Object.entries(extensionInfo).map(info => processExtension(...info));
  const data = await Promise.all(promises);
  const result = `${ warningString }\n${ yaml.stringify(data) }`;

  await fs.promises.writeFile(fileName, result, 'utf-8');
}

run().catch((ex) => {
  console.error(ex);
  process.exit(1);
});
